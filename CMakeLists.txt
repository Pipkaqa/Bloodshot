cmake_minimum_required(VERSION 3.6 FATAL_ERROR)
project("Bloodshot")

set(CMAKE_CXX_STANDARD "23")

#Global
	#Common
		set(SOURCE_DIR "Source")
		set(THIRD_PARTY_DIR "ThirdParty")
		set(PROJECT_FOLDER_NAME	"Bloodshot Game Engine")
	#Engine
		set(ENGINE_PROJECT_NAME "Engine")
		set(ENGINE_SOURCE_DIR "${SOURCE_DIR}/Engine")
		file(GLOB_RECURSE ENGINE_SOURCES "${ENGINE_SOURCE_DIR}/*.cpp")
		file(GLOB_RECURSE ENGINE_HEADERS "${ENGINE_SOURCE_DIR}/*.h")
	#Editor
		set(EDITOR_PROJECT_NAME "Editor")
		set(EDITOR_SOURCE_DIR "${SOURCE_DIR}/Editor")
		file(GLOB_RECURSE EDITOR_SOURCES "${EDITOR_SOURCE_DIR}/*.cpp")
		file(GLOB_RECURSE EDITOR_HEADERS "${EDITOR_SOURCE_DIR}/*.h")
	#Runtime
		set(RUNTIME_PROJECT_NAME "Runtime")
		set(RUNTIME_SOURCE_DIR "${SOURCE_DIR}/Runtime")
		file(GLOB_RECURSE RUNTIME_SOURCES "${RUNTIME_SOURCE_DIR}/*.cpp")
		file(GLOB_RECURSE RUNTIME_HEADERS "${RUNTIME_SOURCE_DIR}/*.h")
	#Project
		set(XPROJECT_SOURCE_DIR "Project")
		file(GLOB_RECURSE XPROJECT_SOURCES "${XPROJECT_SOURCE_DIR}/*.cpp")
		file(GLOB_RECURSE XPROJECT_HEADERS "${XPROJECT_SOURCE_DIR}/*.h")

#ThirdParty
	#glfw
		set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
		set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
		set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
		set(GLFW_INSTALL OFF CACHE BOOL "" FORCE)
		add_subdirectory("${THIRD_PARTY_DIR}/glfw")
	#glad
		add_subdirectory("${THIRD_PARTY_DIR}/glad")
	#glm
		add_subdirectory("${THIRD_PARTY_DIR}/glm")

#Source
	#Engine
		add_library(${ENGINE_PROJECT_NAME} STATIC
			"${ENGINE_SOURCES}"
			"${ENGINE_HEADERS}")
		target_include_directories(${ENGINE_PROJECT_NAME} PRIVATE "${ENGINE_SOURCE_DIR}")
		target_include_directories(${ENGINE_PROJECT_NAME} PUBLIC "${THIRD_PARTY_DIR}/glfw/include")
		target_include_directories(${ENGINE_PROJECT_NAME} PUBLIC "${THIRD_PARTY_DIR}/glad/include")
		target_link_libraries(${ENGINE_PROJECT_NAME} PUBLIC "glfw")
		target_link_libraries(${ENGINE_PROJECT_NAME} PUBLIC "glad")
		target_link_libraries(${ENGINE_PROJECT_NAME} PUBLIC "glm")
		set_target_properties(${ENGINE_PROJECT_NAME} PROPERTIES FOLDER "${PROJECT_FOLDER_NAME}")
		set_target_properties(${ENGINE_PROJECT_NAME} PROPERTIES
			LIBRARY_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Binaries/Debug"
			LIBRARY_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Binaries/Release"
			LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/Binaries/RelWithDebInfo"
			LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL "${CMAKE_BINARY_DIR}/Binaries/MinSizeRel")
	#Editor
		add_executable(${EDITOR_PROJECT_NAME}
			"${EDITOR_SOURCES}"
			"${EDITOR_HEADERS}"
			"${XPROJECT_SOURCES}"
			"${XPROJECT_HEADERS}")
		target_include_directories(${EDITOR_PROJECT_NAME} PRIVATE "${ENGINE_SOURCE_DIR}")
		target_include_directories(${EDITOR_PROJECT_NAME} PRIVATE "${XPROJECT_SOURCE_DIR}/Assets")
		target_link_libraries(${EDITOR_PROJECT_NAME} PRIVATE "${ENGINE_PROJECT_NAME}")
		set_target_properties(${EDITOR_PROJECT_NAME} PROPERTIES FOLDER "${PROJECT_FOLDER_NAME}")
		set_target_properties(${EDITOR_PROJECT_NAME} PROPERTIES
			RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Binaries/Debug"
			RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Binaries/Release"
			RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/Binaries/RelWithDebInfo"
			RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL "${CMAKE_BINARY_DIR}/Binaries/MinSizeRel")
	#Runtime
		add_executable(${RUNTIME_PROJECT_NAME}
			"${RUNTIME_SOURCES}"
			"${RUNTIME_HEADERS}"
			"${XPROJECT_SOURCES}"
			"${XPROJECT_HEADERS}")
		target_include_directories(${RUNTIME_PROJECT_NAME} PRIVATE "${ENGINE_SOURCE_DIR}")
		target_include_directories(${RUNTIME_PROJECT_NAME} PRIVATE "${XPROJECT_SOURCE_DIR}/Assets")
		target_link_libraries(${RUNTIME_PROJECT_NAME} PRIVATE "${ENGINE_PROJECT_NAME}")
		set_target_properties(${RUNTIME_PROJECT_NAME} PROPERTIES FOLDER "${PROJECT_FOLDER_NAME}")
		set_target_properties(${RUNTIME_PROJECT_NAME} PROPERTIES
			RUNTIME_OUTPUT_DIRECTORY_DEBUG "${CMAKE_BINARY_DIR}/Binaries/Debug"
			RUNTIME_OUTPUT_DIRECTORY_RELEASE "${CMAKE_BINARY_DIR}/Binaries/Release"
			RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${CMAKE_BINARY_DIR}/Binaries/RelWithDebInfo"
			RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL "${CMAKE_BINARY_DIR}/Binaries/MinSizeRel")

#Project
	set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT "${EDITOR_PROJECT_NAME}")
	
#Output
	#if(${CMAKE_BUILD_TYPE} STREQUAL Debug)
	#	add_custom_command(TARGET ${EDITOR_PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory $<TARGET_FILE_DIR:${EDITOR_PROJECT_NAME}>/../Debug ${CMAKE_CURRENT_SOURCE_DIR}/Launch/Debug)
	#	add_custom_command(TARGET ${RUNTIME_PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory $<TARGET_FILE_DIR:${RUNTIME_PROJECT_NAME}>/../Debug ${CMAKE_CURRENT_SOURCE_DIR}/Launch/Debug)
	#elseif(${CMAKE_BUILD_TYPE} STREQUAL Release)
	#	add_custom_command(TARGET ${EDITOR_PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory $<TARGET_FILE_DIR:${EDITOR_PROJECT_NAME}>/../Release ${CMAKE_CURRENT_SOURCE_DIR}/Launch/Release)
	#	add_custom_command(TARGET ${RUNTIME_PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy_directory $<TARGET_FILE_DIR:${RUNTIME_PROJECT_NAME}>/../Release ${CMAKE_CURRENT_SOURCE_DIR}/Launch/Release)
	#endif()
